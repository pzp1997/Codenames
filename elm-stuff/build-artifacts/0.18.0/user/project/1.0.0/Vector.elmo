var _user$project$Vector$getY = _elm_lang$core$Tuple$second;
var _user$project$Vector$getX = _elm_lang$core$Tuple$first;
var _user$project$Vector$add = F2(
	function (v, w) {
		return {
			ctor: '_Tuple2',
			_0: _user$project$Vector$getX(v) + _user$project$Vector$getX(w),
			_1: _user$project$Vector$getY(v) + _user$project$Vector$getY(w)
		};
	});
var _user$project$Vector$invert = function (v) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$negate(
			_user$project$Vector$getX(v)),
		_1: _elm_lang$core$Basics$negate(
			_user$project$Vector$getY(v))
	};
};
var _user$project$Vector$subtract = F2(
	function (v, w) {
		return A2(
			_user$project$Vector$add,
			v,
			_user$project$Vector$invert(w));
	});
var _user$project$Vector$scale = F2(
	function (i, v) {
		return {
			ctor: '_Tuple2',
			_0: _user$project$Vector$getX(v) * i,
			_1: _user$project$Vector$getY(v) * i
		};
	});
var _user$project$Vector$innerProduct = F2(
	function (v, w) {
		return (_user$project$Vector$getX(v) * _user$project$Vector$getX(w)) + (_user$project$Vector$getY(v) * _user$project$Vector$getY(w));
	});
var _user$project$Vector$zero = {ctor: '_Tuple2', _0: 0, _1: 0};
