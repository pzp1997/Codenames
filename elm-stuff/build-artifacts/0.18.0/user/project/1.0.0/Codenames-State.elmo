var _user$project$Codenames_State$subscriptions = function (model) {
	return A2(_elm_lang$websocket$WebSocket$listen, 'ws://echo.websocket.org', _user$project$Types$NewMessage);
};
var _user$project$Codenames_State$cardsRemaining = F2(
	function (board, cardType) {
		var doesCount = function (card) {
			return _elm_lang$core$Native_Utils.eq(card.cardType, cardType) && _elm_lang$core$Native_Utils.eq(card.revealed, false);
		};
		var doesCount_ = function (v) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				false,
				A2(
					_elm_lang$core$Maybe$map,
					doesCount,
					A2(_user$project$Grid$lookupV, v, board)));
		};
		return _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				doesCount_,
				_user$project$Grid$allVectors(board)));
	});
var _user$project$Codenames_State$endGame = function (model) {
	var noneRemaining = function (_p0) {
		return A2(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				}),
			0,
			A2(_user$project$Codenames_State$cardsRemaining, model.board, _p0));
	};
	return A2(
		_elm_lang$core$List$any,
		noneRemaining,
		{
			ctor: '::',
			_0: _user$project$Types$Team(_user$project$Types$Blue),
			_1: {
				ctor: '::',
				_0: _user$project$Types$Team(_user$project$Types$Red),
				_1: {
					ctor: '::',
					_0: _user$project$Types$KillWord,
					_1: {ctor: '[]'}
				}
			}
		}) ? _elm_lang$core$Native_Utils.update(
		model,
		{isGameOver: true}) : model;
};
var _user$project$Codenames_State$passTurn = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			turn: _user$project$Types$otherTeam(model.turn)
		});
};
var _user$project$Codenames_State$reveal = F2(
	function (v, model) {
		var setRevealed = function (card) {
			return _elm_lang$core$Native_Utils.update(
				card,
				{revealed: true});
		};
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A3(_user$project$Grid$mapAtV, setRevealed, v, model.board)
			});
	});
var _user$project$Codenames_State$click = F2(
	function (v, model) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			model,
			A2(
				_elm_lang$core$Maybe$map,
				_user$project$Codenames_State$endGame,
				A2(
					_elm_lang$core$Maybe$map,
					_user$project$Codenames_State$reveal(v),
					A2(
						_elm_lang$core$Maybe$map,
						function (card) {
							var _p1 = card.cardType;
							switch (_p1.ctor) {
								case 'Blank':
									return _user$project$Codenames_State$passTurn(model);
								case 'KillWord':
									return _user$project$Codenames_State$passTurn(model);
								default:
									return (!_elm_lang$core$Native_Utils.eq(_p1._0, model.turn)) ? _user$project$Codenames_State$passTurn(model) : model;
							}
						},
						A2(
							_elm_lang$core$Maybe$andThen,
							function (card) {
								return card.revealed ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(card);
							},
							A2(
								_elm_lang$core$Maybe$andThen,
								function (card) {
									return model.isGameOver ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(card);
								},
								A2(_user$project$Grid$lookupV, v, model.board)))))));
	});
var _user$project$Codenames_State$setCardWords = F2(
	function (list, board) {
		var index = function (v) {
			return _user$project$Vector$getX(v) + (5 * _user$project$Vector$getY(v));
		};
		var setWord = F2(
			function (v, card) {
				return _elm_lang$core$Native_Utils.update(
					card,
					{
						word: A2(
							_elm_lang$core$Maybe$withDefault,
							'ERROR',
							A3(
								_elm_lang$core$Basics$flip,
								_user$project$RandomList$get,
								list,
								index(v)))
					});
			});
		return A2(_user$project$Grid$indexedMap, setWord, board);
	});
var _user$project$Codenames_State$setCardOwners = F2(
	function (list, board) {
		var index = function (v) {
			return _user$project$Vector$getX(v) + (5 * _user$project$Vector$getY(v));
		};
		var setOwner = F2(
			function (v, card) {
				return _elm_lang$core$Native_Utils.update(
					card,
					{
						cardType: A2(
							_elm_lang$core$Maybe$withDefault,
							_user$project$Types$Blank,
							A3(
								_elm_lang$core$Basics$flip,
								_user$project$RandomList$get,
								list,
								index(v)))
					});
			});
		return A2(_user$project$Grid$indexedMap, setOwner, board);
	});
var _user$project$Codenames_State$randomTeam = A2(
	_elm_lang$core$Random$generate,
	_user$project$Types$SetTeam,
	A2(
		_elm_lang$core$Random$map,
		function (b) {
			return b ? _user$project$Types$Blue : _user$project$Types$Red;
		},
		_elm_lang$core$Random$bool));
var _user$project$Codenames_State$getWordList = function (wl) {
	var _p2 = wl;
	switch (_p2.ctor) {
		case 'EasyWords':
			return _user$project$WordLists$easy_words;
		case 'NormalWords':
			return _user$project$WordLists$words;
		default:
			return _user$project$WordLists$original;
	}
};
var _user$project$Codenames_State$randomWords = function (wl) {
	return A2(
		_elm_lang$core$Random$generate,
		_user$project$Types$SetCardWords,
		_user$project$RandomList$shuffle(
			_user$project$Codenames_State$getWordList(wl)));
};
var _user$project$Codenames_State$cardTypeList = function (activeTeam) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A2(
			_elm_lang$core$List$repeat,
			9,
			_user$project$Types$Team(activeTeam)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$repeat,
				8,
				_user$project$Types$Team(
					_user$project$Types$otherTeam(activeTeam))),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$repeat, 7, _user$project$Types$Blank),
				_elm_lang$core$List$singleton(_user$project$Types$KillWord))));
};
var _user$project$Codenames_State$randomCards = function (t) {
	return A2(
		_elm_lang$core$Random$generate,
		_user$project$Types$SetCardOwners,
		_user$project$RandomList$shuffle(
			_user$project$Codenames_State$cardTypeList(t)));
};
var _user$project$Codenames_State$withMouseOver = F2(
	function (b, card) {
		return _elm_lang$core$Native_Utils.update(
			card,
			{mouseOver: b});
	});
var _user$project$Codenames_State$setMouseOver = F3(
	function (b, v, board) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			board,
			A2(
				_elm_lang$core$Maybe$map,
				function (card) {
					return A3(_user$project$Grid$setV, v, card, board);
				},
				A2(
					_elm_lang$core$Maybe$map,
					function (card) {
						return A2(_user$project$Codenames_State$withMouseOver, b, card);
					},
					A2(_user$project$Grid$lookupV, v, board))));
	});
var _user$project$Codenames_State$blankBoard = A3(_user$project$Grid$grid, 5, 5, _user$project$Types$dummyCard);
var _user$project$Codenames_State$newModel = {board: _user$project$Codenames_State$blankBoard, turn: _user$project$Types$Blue, hints: false, isGameOver: false, wordList: _user$project$Types$NormalWords};
var _user$project$Codenames_State$reset = function (model) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		_elm_lang$core$Native_Utils.update(
			_user$project$Codenames_State$newModel,
			{wordList: model.wordList}),
		{
			ctor: '::',
			_0: _user$project$Codenames_State$randomTeam,
			_1: {
				ctor: '::',
				_0: _user$project$Codenames_State$randomWords(model.wordList),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Codenames_State$init = _user$project$Codenames_State$reset(_user$project$Codenames_State$newModel);
var _user$project$Codenames_State$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Click':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(_user$project$Codenames_State$click, _p3._0, model),
					{ctor: '[]'});
			case 'SetTeam':
				var _p4 = _p3._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{turn: _p4}),
					{
						ctor: '::',
						_0: _user$project$Codenames_State$randomCards(_p4),
						_1: {ctor: '[]'}
					});
			case 'SetCardOwners':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							board: A2(_user$project$Codenames_State$setCardOwners, _p3._0, model.board)
						}),
					{ctor: '[]'});
			case 'SetCardWords':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							board: A2(_user$project$Codenames_State$setCardWords, _p3._0, model.board)
						}),
					{ctor: '[]'});
			case 'SetWordList':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{wordList: _p3._0}),
					{ctor: '[]'});
			case 'ToggleHints':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{hints: !model.hints}),
					{ctor: '[]'});
			case 'Reset':
				return _user$project$Codenames_State$reset(model);
			case 'EnterTile':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							board: A3(_user$project$Codenames_State$setMouseOver, true, _p3._0, model.board)
						}),
					{ctor: '[]'});
			case 'LeaveTile':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							board: A3(_user$project$Codenames_State$setMouseOver, false, _p3._0, model.board)
						}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
