var _user$project$State$subscriptions = function (model) {
	return _user$project$Sockets$subscriptions;
};
var _user$project$State$setGameOver = F2(
	function (b, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{isGameOver: b});
	});
var _user$project$State$cardsRemaining = F2(
	function (board, cardType) {
		var doesCount = function (card) {
			return _elm_lang$core$Native_Utils.eq(card.cardType, cardType) && _elm_lang$core$Native_Utils.eq(card.revealed, false);
		};
		var doesCount_ = function (v) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				false,
				A2(
					_elm_lang$core$Maybe$map,
					doesCount,
					A2(_user$project$Grid$lookupV, v, board)));
		};
		return _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				doesCount_,
				_user$project$Grid$allVectors(board)));
	});
var _user$project$State$endGame = function (model) {
	var noneRemaining = function (_p0) {
		return A2(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				}),
			0,
			A2(_user$project$State$cardsRemaining, model.board, _p0));
	};
	return A2(
		_elm_lang$core$List$any,
		noneRemaining,
		{
			ctor: '::',
			_0: _user$project$Types$Team(_user$project$Types$Blue),
			_1: {
				ctor: '::',
				_0: _user$project$Types$Team(_user$project$Types$Red),
				_1: {
					ctor: '::',
					_0: _user$project$Types$KillWord,
					_1: {ctor: '[]'}
				}
			}
		}) ? _elm_lang$core$Native_Utils.update(
		model,
		{isGameOver: true}) : model;
};
var _user$project$State$passTurn = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			turn: _user$project$Types$otherTeam(model.turn)
		});
};
var _user$project$State$reveal = F2(
	function (v, model) {
		var setRevealed = function (card) {
			return _elm_lang$core$Native_Utils.update(
				card,
				{revealed: true});
		};
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A3(_user$project$Grid$mapAtV, setRevealed, v, model.board)
			});
	});
var _user$project$State$setUnrevealed = function (model) {
	var board = model.board;
	var newBoard = A2(
		_user$project$Grid$map,
		function (card) {
			return _elm_lang$core$Native_Utils.update(
				card,
				{revealed: false});
		},
		board);
	return _elm_lang$core$Native_Utils.update(
		model,
		{board: newBoard});
};
var _user$project$State$setCardWords = F2(
	function (cardWords, model) {
		var index = function (v) {
			return _user$project$Vector$getX(v) + (5 * _user$project$Vector$getY(v));
		};
		var setWord = F2(
			function (v, card) {
				return _elm_lang$core$Native_Utils.update(
					card,
					{
						word: A2(
							_elm_lang$core$Maybe$withDefault,
							'ERROR',
							A3(
								_elm_lang$core$Basics$flip,
								_user$project$RandomList$get,
								cardWords,
								index(v)))
					});
			});
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A2(_user$project$Grid$indexedMap, setWord, model.board)
			});
	});
var _user$project$State$setCardTypes = F2(
	function (cardTypes, model) {
		var index = function (v) {
			return _user$project$Vector$getX(v) + (5 * _user$project$Vector$getY(v));
		};
		var setOwner = F2(
			function (v, card) {
				return _elm_lang$core$Native_Utils.update(
					card,
					{
						cardType: A2(
							_elm_lang$core$Maybe$withDefault,
							_user$project$Types$Blank,
							A3(
								_elm_lang$core$Basics$flip,
								_user$project$RandomList$get,
								cardTypes,
								index(v)))
					});
			});
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				board: A2(_user$project$Grid$indexedMap, setOwner, model.board)
			});
	});
var _user$project$State$setTurn = F2(
	function (team, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{turn: team});
	});
var _user$project$State$setInitState = F2(
	function (_p1, model) {
		var _p2 = _p1;
		return _user$project$State$setUnrevealed(
			A2(
				_user$project$State$setCardWords,
				_p2._2,
				A2(
					_user$project$State$setCardTypes,
					_p2._1,
					A2(_user$project$State$setTurn, _p2._0, model))));
	});
var _user$project$State$getWordList = function (wl) {
	var _p3 = wl;
	switch (_p3.ctor) {
		case 'EasyWords':
			return _user$project$WordLists$easy_words;
		case 'NormalWords':
			return _user$project$WordLists$words;
		default:
			return _user$project$WordLists$original;
	}
};
var _user$project$State$cardTypeList = function (activeTeam) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A2(
			_elm_lang$core$List$repeat,
			9,
			_user$project$Types$Team(activeTeam)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$repeat,
				8,
				_user$project$Types$Team(
					_user$project$Types$otherTeam(activeTeam))),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$repeat, 7, _user$project$Types$Blank),
				_elm_lang$core$List$singleton(_user$project$Types$KillWord))));
};
var _user$project$State$randomInitialState = function (wl) {
	var randomWords = _user$project$RandomList$shuffle(
		_user$project$State$getWordList(wl));
	var randomCards = function (t) {
		return _user$project$RandomList$shuffle(
			_user$project$State$cardTypeList(t));
	};
	var randomTeam = A2(
		_elm_lang$core$Random$map,
		function (b) {
			return b ? _user$project$Types$Blue : _user$project$Types$Red;
		},
		_elm_lang$core$Random$bool);
	return A2(
		_elm_lang$core$Random$generate,
		_user$project$Types$InitState,
		A3(
			_elm_lang$core$Random$map2,
			F2(
				function (ls, _p4) {
					var _p5 = _p4;
					return A3(
						F3(
							function (v0, v1, v2) {
								return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
							}),
						_p5._0,
						_p5._1,
						ls);
				}),
			randomWords,
			A2(
				_elm_lang$core$Random$andThen,
				function (team) {
					return A2(
						_elm_lang$core$Random$pair,
						_user$project$RandomList$constant(team),
						randomCards(team));
				},
				randomTeam)));
};
var _user$project$State$setMouseOver = F3(
	function (b, v, board) {
		var withMouseOver = F2(
			function (b, card) {
				return _elm_lang$core$Native_Utils.update(
					card,
					{mouseOver: b});
			});
		return A2(
			_elm_lang$core$Maybe$withDefault,
			board,
			A2(
				_elm_lang$core$Maybe$map,
				function (card) {
					return A3(_user$project$Grid$setV, v, card, board);
				},
				A2(
					_elm_lang$core$Maybe$map,
					function (card) {
						return A2(withMouseOver, b, card);
					},
					A2(_user$project$Grid$lookupV, v, board))));
	});
var _user$project$State$click = F2(
	function (v, model) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			model,
			A2(
				_elm_lang$core$Maybe$map,
				_user$project$State$endGame,
				A2(
					_elm_lang$core$Maybe$map,
					_user$project$State$reveal(v),
					A2(
						_elm_lang$core$Maybe$map,
						function (card) {
							var _p6 = card.cardType;
							switch (_p6.ctor) {
								case 'Blank':
									return _user$project$State$passTurn(model);
								case 'KillWord':
									return _user$project$State$passTurn(model);
								default:
									return (!_elm_lang$core$Native_Utils.eq(_p6._0, model.turn)) ? _user$project$State$passTurn(model) : model;
							}
						},
						A2(
							_elm_lang$core$Maybe$andThen,
							function (card) {
								return card.revealed ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(card);
							},
							A2(
								_elm_lang$core$Maybe$andThen,
								function (card) {
									return model.isGameOver ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(card);
								},
								A2(_user$project$Grid$lookupV, v, model.board)))))));
	});
var _user$project$State$reset = function (model) {
	return _user$project$State$randomInitialState(model.wordList);
};
var _user$project$State$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'Click':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Sockets$send(
							_elm_lang$core$Native_Utils.update(
								_user$project$Types$blank,
								{
									click: _elm_lang$core$Maybe$Just(_p7._0)
								})),
						_1: {ctor: '[]'}
					});
			case 'InitState':
				var trans = _elm_lang$core$Native_Utils.update(
					_user$project$Types$blank,
					{
						turn: _elm_lang$core$Maybe$Just(_p7._0._0),
						typeList: _elm_lang$core$Maybe$Just(_p7._0._1),
						wordList: _elm_lang$core$Maybe$Just(
							A2(_elm_lang$core$List$take, 25, _p7._0._2)),
						reset: true
					});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Sockets$send(trans),
						_1: {ctor: '[]'}
					});
			case 'SetWordList':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{wordList: _p7._0}),
					{ctor: '[]'});
			case 'ToggleHints':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{hints: !model.hints}),
					{ctor: '[]'});
			case 'Reset':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$State$reset(model),
						_1: {ctor: '[]'}
					});
			case 'MouseOverTile':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							board: A3(_user$project$State$setMouseOver, _p7._0, _p7._1, model.board)
						}),
					{ctor: '[]'});
			default:
				var _p10 = _p7._0;
				var updateIf = F3(
					function (f, b, model) {
						return b ? f(model) : model;
					});
				var updateMaybe = F3(
					function (f, a, model) {
						var _p8 = a;
						if (_p8.ctor === 'Nothing') {
							return model;
						} else {
							return A2(f, _p8._0, model);
						}
					});
				var newModel = A3(
					updateIf,
					function (_p9) {
						return _user$project$State$setUnrevealed(
							A2(_user$project$State$setGameOver, false, _p9));
					},
					function (_) {
						return _.reset;
					}(_p10),
					A3(
						updateIf,
						_user$project$State$setGameOver(true),
						function (_) {
							return _.isGameOver;
						}(_p10),
						A3(
							updateMaybe,
							_user$project$State$setTurn,
							function (_) {
								return _.turn;
							}(_p10),
							A3(
								updateMaybe,
								_user$project$State$click,
								function (_) {
									return _.click;
								}(_p10),
								A3(
									updateMaybe,
									_user$project$State$setCardWords,
									function (_) {
										return _.wordList;
									}(_p10),
									A3(
										updateMaybe,
										_user$project$State$setCardTypes,
										function (_) {
											return _.typeList;
										}(_p10),
										model))))));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					newModel,
					{ctor: '[]'});
		}
	});
var _user$project$State$blankBoard = A3(_user$project$Grid$grid, 5, 5, _user$project$Types$dummyCard);
var _user$project$State$newModel = {board: _user$project$State$blankBoard, turn: _user$project$Types$Blue, hints: false, isGameOver: true, wordList: _user$project$Types$NormalWords};
var _user$project$State$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	_user$project$State$newModel,
	{ctor: '[]'});
